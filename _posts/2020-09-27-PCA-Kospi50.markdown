---
layout: post
title:  PCA를 통한 KOSPI 50 종목들의 주가 데이터 차원 축소
date:   2020-09-27
image:  dimension.jpg
tags:   Data Finance
---
## PCA 란?

`PCA(Principal Component Analysis)`는 데이터의 분산(Variance)을 최대한 보존하면서 서로 직교하는 새 기저를 찾아, 고차원의 표본들을 선형 연관성이 없는 저차원 공간으로 변환하는 기법이다. PCA는 기존 변수를 조합해 새로운 변수를 만드는 기법인 변수추출 방법을 따른다. 그 중, 기존 변수 가운떼 일부만 활용하는 방식이 있고, 모두 쓰는 방식이 있는데 PCA는 후자에 해당한다. PCA는 기존 변수를 선형결합해 새로운 변수를 만들어낸다.

**PCA를 하는 이유**<BR/>
* 여러 변수들 간에 내재하는 연관성을 이용해 소수의 주성분으로 차원을 축소함으로써 데이터를 직관적으로 이해할 수 있도록 도와준다.
* 변수들 간에 상관관계가 높은 다중공선성이 존재할 경우, 모형의 신뢰도가 떨어질 수 있다. 이 때, PCA를 통해 높은 상관관계를 가진 변수들을 주성분으로 축소하여 모형 구축에 활용한다.
* 데이터의 차원이 커지면, 이를 분석하는 비용이 커지기 때문에 차원 축소를 통해 더 적은 비용으로 효율적인 분석이 가능해진다.<BR/><BR/><BR/><BR/>

## 분석 목적

금융 공부를 하면서 이자율의 기간 구조가 level, slope, curvature라는 세 개의 주성분으로 구성되어 있으며, 이 세 가지 성분이 이자율의 기간 구조의 90% 이상을 설명한다는 것을 배웠다. 마찬가지로, Kospi50 구성 종목들의 주가 시계열 데이터를 바탕으로, 전체 데이터를 설명할 수 있는 주성분들을 어떻게 분류할 수 있는지 알아보고자 한다. 또, 전체 데이터를 설명할 수 있는 주성분들과 전체 데이터를 대표하는 kospi50 지수의 시계열 흐름은 어떤 관계가 있는지 알아보고자 한다.<BR/><BR/><BR/><BR/>

## 금융 데이터 소개

`Kospi50 구성 종목 50개의 개별 주가`의 2019년 2월 13일부터 2020년 9월 25일 데이터를 활용했다.<BR/>
* `현대건설`, `삼성전기`, `LG유플러스`는 2019년 6월 14일 이후로 Kospi50에 편입되었지만, 편입되지 않았던 기간이 전체 기간 중 매우 많은 비중을 차지하지 않으며, Kospi50 지수 데이터는 단순한 비교의 목적으로 활용했기 때문에 이 세 종목들 역시 2019년 2월 13일부터 데이터를 활용했다.
* 2020년 9월 11일에 편입된 `SK바이오팜`은 최근에 상장되었기 때문에 현재까지 데이터가 매우 적어, 이전의 Kospi50 편입 종목이었던 `한미사이언스` 데이터를 활용했다.<BR/><BR/><BR/><BR/>
* Kospi50 지수는 시가총액 비율에 대한 영향을 제거하기 위해 동일가중 지수를 활용했다.

## 적용 과정

필요한 데이터를 불러와 header를 정리했다.

{% highlight ruby %}
from google.colab import files
uploaded = files.upload()

# 데이터 불러오기
import pandas as pd

stock_1 = pd.read_csv("stock_1.csv", skiprows = 3, engine = "python")
stock_2 = pd.read_csv("stock_2.csv", skiprows = 3, engine = "python")
stock_3 = pd.read_csv("stock_3.csv", skiprows = 3, engine = "python")
stock_4 = pd.read_csv("stock_4.csv", skiprows = 3, engine = "python")
{% endhighlight %}

불러온 데이터에 대한 전처리를 진행하고 데이터들을 병합했다.

{% highlight ruby %}
# 필요없는 칼럼 삭제
col_1 = stock_1.columns[16:]
col_2 = stock_2.columns[16:]
col_3 = stock_3.columns[16:]
col_4 = stock_4.columns[7:]

stock_1 = stock_1.drop(col_1, axis = 1)
stock_2 = stock_2.drop(col_2, axis = 1)
stock_3 = stock_3.drop(col_3, axis = 1)
stock_4 = stock_4.drop(col_4, axis = 1)

# 첫번 째 칼럼 명 재설정 및 데이터 병합
stock_1.rename(columns = {"Unnamed: 0" : "date"}, inplace = True)
stock_2.rename(columns = {"Unnamed: 0" : "date"}, inplace = True)
stock_3.rename(columns = {"Unnamed: 0" : "date"}, inplace = True)
stock_4.rename(columns = {"Unnamed: 0" : "date"}, inplace = True)

kospi50_all = pd.merge(stock_1, stock_2, on = "date", how = "inner")
kospi50_all = pd.merge(kospi50_all, stock_3, on = "date", how = "inner")
kospi50_all = pd.merge(kospi50_all, stock_4, on = "date", how = "inner")

# 결측치 제거
kospi50_all = kospi50_all.dropna(axis = 0)
kospi50_all = kospi50_all.reset_index(drop = False)
kospi50_all = kospi50_all.drop("index", axis = 1)

# date, 코스피 50 동일가중 칼럼 분리
kospi50 = kospi50_all.drop(["date","코스피 50 동일가중"], axis = 1)
{% endhighlight %}

PCA, 시각화를 통한 비교 등을 위해 데이터들을 숫자형으로 변환했다.

{% highlight ruby %}
# 숫자형 변환을 위한 , 제거
for i in range(0, len(kospi50.columns)):
  kospi50.iloc[:,i] = kospi50.iloc[:,i].str.replace(",", "")

# 숫자형 변환
kospi50 = kospi50.astype(np.int64)
kospi50.dtypes
{% endhighlight %}
<img width="1121" alt="스크린샷 2020-09-27 오후 11 08 37" src="https://user-images.githubusercontent.com/70478154/94366995-8b207300-0116-11eb-8358-0fd844a6bd03.png">

정리가 된 50개 종목의 주가 데이터를 바탕으로 PCA를 진행했다.

{% highlight ruby %}
# PCA
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

scaler = StandardScaler()
standard = scaler.fit_transform(kospi50)       # Standardized

pca = PCA()
pca.fit(standard)

vals = pca.explained_variance_ratio_           # 분산 비율
cumvals = np.cumsum(vals)                      # 누적 분산 비율(누적 기여율)
cumvals
{% endhighlight %}
<img width="578" alt="스크린샷 2020-09-27 오후 11 12 39" src="https://user-images.githubusercontent.com/70478154/94367059-ff5b1680-0116-11eb-9c54-6200dfe97067.png">

`누적 기여율`은 각 PC(주성분)들이 전체 데이터를 설명할 수 있는 비율이라고 할 수 있다. 즉, PC1은 전체 데이터의 약 `58.46%`를 설명하고, PC1과 PC2는 약 `76.92%`를 설명한다.

몇 차원으로 축소할 것인지를 결정하기 위해 Scree plot을 통해 누적기여율을 시각화했다. 효과적인 시각화를 위해 6개의 PC만 선택했다.

{% highlight ruby %}
# Scree plot을 통한 시각화 - 6개의 PC만

import matplotlib.pyplot as plt

num = 6
count = np.arange(num) + 1

# 분산 비율, 누적 분산 비율 그리기 
plt.figure(figsize = (6, 6))
ax = plt.subplot()
plt.bar(count, vals[:6], color = "#a29bfe")
plt.plot(count, cumvals[:6], color = "#fdcb6e", marker = "*")

# 분산 비율 그래프에 삽입
for i in range(num):
  ax.annotate(str(np.round(vals[i] * 100, 2)) + "%",
              (count[i], vals[i]),
              va = "bottom",
              ha = "center",
              fontsize = 10)

# 누적 분산 비율 그래프에 삽입
for i in range(1, 6):
  ax.annotate(str(np.round(cumvals[i] * 100, 2)) + "%",
              (count[i], cumvals[i]),
              va = "bottom",
              ha = "center",
              fontsize = "9",
              color = "gray")

ax.set_xlabel("PCs")
ax.set_ylabel("Variance rate");
{% endhighlight %}
<img width="385" alt="스크린샷 2020-09-27 오후 11 21 22" src="https://user-images.githubusercontent.com/70478154/94367212-341b9d80-0118-11eb-87fc-e85e9840011a.png">

그래프에 따르면, PC1부터 PC3까지 사용했을 때, 전체 데이터의 약 `84.47%`를 설명하며, PC4까지 사용했을 때, 약 `90.63%`를 설명한다는 것을 알 수 있다. 차원 축소의 수를 선택할 때, 누적 기여율에 대한 명확한 기준치는 없지만, 일반적으로 80% 이상을 기준으로 하며, 더 엄격하게 한다면 90% 이상을 기준으로 할 수 있다. 이번 분석에서는 전체 데이터의 90.63%를 설명하는 4차원으로 차원 축소를 진행하고자 한다.

{% highlight ruby %}
# 4차원으로 차원 축소
pca_4 = PCA(4)
pca_4.fit(standard)

# Eigenvectors
eigen_vec = pca_4.components_
eigen_vec = pd.DataFrame(eigen_vec, columns = kospi50.columns)
eigen_vec = eigen_vec.T
eigen_vec.columns = ["PC1", "PC2", "PC3", "PC4"]
eigen_vec.head(10)
{% endhighlight %}
<img width="402" alt="스크린샷 2020-09-27 오후 11 29 38" src="https://user-images.githubusercontent.com/70478154/94367387-5bbf3580-0119-11eb-8304-9303f6a3c80b.png">

PCA를 통해 4차원으로 차원 축소한 결과, 다음과 같이 각 PC에 대한 `Eigenvectors(고유벡터)` 데이터가 산출되었다. 각 PC에 대한 고유벡터가 의미하는 것은, PC에 대해 각 feature들이 얼마나 영향을 줄 수 있는지를 수치로 표현한 것이다. 즉, PC1 칼럼의 첫 번째 행 `-0.103994`은 `기아차`가 PC1에 얼마나 영향을 줄 수 있는지를 수치로 나타낸 것이다. `-`이기 때문에 음의 상관관계가 있음을 알 수 있다. 이 데이터를 바탕으로 각 PC들의 특성을 확인해보고자 한다.

{% highlight ruby %}
# PC1/PC2 특성 확인
pc1_rank = abs(eigen_vec.PC1).rank(ascending = False)
print("pc1:\n-----\n", pc1_rank.sort_values().head(6))

pc2_rank = abs(eigen_vec.PC2).rank(ascending = False)
print("\npc2:\n-----\n", pc2_rank.sort_values().head(6))
{% endhighlight %}
<img width="234" alt="스크린샷 2020-09-27 오후 11 38 32" src="https://user-images.githubusercontent.com/70478154/94367582-98d7f780-011a-11eb-90bf-43428c0c4058.png">

위의 데이터는 이전에 산출한 고유벡터를 각 PC별로 절대값이 큰 순서로 순위를 매긴 것이다. 즉, 높은 순위일수록 해당 PC에 큰 영향을 준다는 의미이다. PC1은 주로 `은행` 관련 종목들이 많은 영향을 준다는 것을 확인할 수 있다. PC2는 `LG` 계열사 종목들이 많 영향을 준다는 것을 알 수 있다.

{% highlight ruby %}
# PC3/PC4 특성 확인
pc3_rank = abs(eigen_vec.PC3).rank(ascending = False)
print("pc3:\n-----\n", pc3_rank.sort_values().head(6))

pc4_rank = abs(eigen_vec.PC4).rank(ascending = False)
print("\npc4:\n-----\n", pc4_rank.sort_values().head(6))
{% endhighlight %}
<img width="224" alt="스크린샷 2020-09-27 오후 11 42 37" src="https://user-images.githubusercontent.com/70478154/94367673-2a476980-011b-11eb-827c-e06f06746899.png">

마찬가지로, PC3과 PC4의 특성을 확인해보았지만, PC1, PC2만큼 눈에 보이는 특성으로 분류하기에는 한계가 있다.

위의 결과들을 바탕으로, 50개 종목의 주가 시계열을 보여주는 전체 데이터를 가장 잘 설명하는 PC1과 Kospi50 지수의 시계열 흐름이 어떠한지 알아보고자 한다. 또한, PC1이 `은행` 관련 종목들과 많은 연관성을 가지고 있다는 것을 확인했는데, Kospi은행 지수와의 시계열 흐름 역시 살펴보고자 한다. 이를 위해, 시계열 데이터에 대한 PCA를 통해 `Projected data`를 산출했다.

{% highlight ruby %}
# Projected data
projec = pca_4.transform(standard)
projec = pd.DataFrame(projec, columns = ["PC1", "PC2", "PC3", "PC4"])
projec
{% endhighlight %}
<img width="362" alt="스크린샷 2020-09-28 오전 12 56 18" src="https://user-images.githubusercontent.com/70478154/94369632-f58cdf80-0125-11eb-8f93-c0e7460137c6.png">

각 행들은 2019년 2월 13일부터의 날짜를 의미하며, 각 데이터들은 원본 데이터를 차원 축소하여 추출한 데이터이다.

{% highlight ruby %}
# 코스피 50 동일가중
kospi50_index = kospi50_all["코스피 50 동일가중"]
kospi50_index = pd.DataFrame(kospi50_index)

# 코스피 은행
bank = pd.read_csv("bank.csv", skiprows = 3, engine = "python")
bank["코스피 은행"]
{% endhighlight %}

Kospi50 동일가중 지수와 Kospi 은행 지수 데이터를 불러와 시계열 그래프를 비교했다. PC1은 두 데이터와 음의 상관관계를 가지고 있기 때문에 y축 데이터의 흐름이 반대로 되어 있다. 따라서, y축을 뒤집어 그래프를 나타냈다.

{% highlight ruby %}
# Kospi50 동일가중 지수 시각화
plt.scatter(kospi50_all["date"], kospi50_all["코스피 50 동일가중"])
plt.xlabel("date")
plt.ylabel("Kospi50");
{% endhighlight %}
<img width="406" alt="스크린샷 2020-09-28 오전 12 03 07" src="https://user-images.githubusercontent.com/70478154/94368265-118c8300-011e-11eb-875a-66c45af40f3f.png">

{% highlight ruby %}
# PC1 시각화
plt.scatter(kospi50_all["date"], projec["PC1"])
plt.xlabel("date")
plt.ylabel("PC1")
plt.gca().invert_yaxis();         # y축 inverse
{% endhighlight %}
<img width="397" alt="스크린샷 2020-09-28 오전 12 04 06" src="https://user-images.githubusercontent.com/70478154/94368280-2e28bb00-011e-11eb-966c-10136086fe0f.png">

{% highlight ruby %}
# Kospi 은행 시각화
plt.scatter(kospi50_all["date"], bank["코스피 은행"])
plt.xlabel("date")
plt.ylabel("Kospi bank");
{% endhighlight %}
<img width="399" alt="스크린샷 2020-09-28 오전 12 06 10" src="https://user-images.githubusercontent.com/70478154/94368322-734ced00-011e-11eb-8e49-cf87cd4fdc36.png">

Kospi50 동일가중 지수와 PC1의 시계열 추이가 비슷하게 나타나는 것을 확인할 수 있다. 이를 통해, PC1이 어느 정도 전체 데이터를 설명할 수 있음을 알 수 있다. 또한, `은행` 관련 종목들이 많은 영향을 주는 PC1과 Kospi 은행 지수가 매우 닮아있다는 것을 확인할 수 있다. 이를 통해, 전체 데이터의 주성분 중 하나인 PC1이 `은행` 관련 종목을 대표한다고 이야기 할 수 있다.<BR/><BR/><BR/><BR/>

## 결론

* PCA를 통해 고차원의 데이터셋을 차원 축소하여 주성분 데이터들로 전체 데이터를 어느 정도 설명할 수 있음을 확인했다.
* 차원 축소를 통해 시각화하기 용이하고, 데이터를 쉽게 이해할 수 있다.
* PC1이 `은행` 관련 종목들에 많은 영향을 받는다는 것을 알 수 있다.<BR/><BR/><BR/><BR/>

# 한계

* 각 주성분들이 전체 데이터에 대해 어떤 분류를 갖는지 명확하게 알기 어렵다.
* 지수 편입 종목에 대한 차이 때문에 비교 데이터인 Kospi50 지수가 전체 데이터를 대표하기에는 약간의 오차가 발생한다.
